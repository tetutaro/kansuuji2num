#!/usr/bin/env python
# -*- coding:utf-8 -*-
from __future__ import annotations
from unittest import TestCase, main
from kansuji2num import kansuji2num


class TestKansuji2num(TestCase):
    def test_basic(self: TestKansuji2num) -> None:
        test_patterns = [
            ('一億二千三百四十五万六千七百八十九', '123456789'),
            ('１２３４５６７８９', '123456789'),
            ('123456789', '123456789'),
            ('１億２３４５万６７８９', '123456789'),
            ('1億2345万6789', '123456789'),
            ('一京二千三百四十五兆六千七百八十九億', '12345678900000000'),
            ('１２３４５６７８９００００００００', '12345678900000000'),
            ('12345678900000000', '12345678900000000'),
            ('１京２３４５兆６７８９億', '12345678900000000'),
            ('1京2345兆6789億', '12345678900000000'),
            ('一京二百三兆四百五億六百七万八百九', '10203040506070809'),
            ('１京２０３兆４０５億６０７万８０９', '10203040506070809'),
            ('1京203兆405億607万809', '10203040506070809'),
            ('十京二千兆五十億六千七十万八千九十', '102000005060708090'),
            ('１０京２０００兆６０７０万８０９０', '102000000060708090'),
            ('10京2000兆6070万8090', '102000000060708090'),
            ('九千一', '9001'),
            ('９００１', '9001'),
            ('9001', '9001'),
            ('一万五', '10005'),
            ('１０００５', '10005'),
            ('10005', '10005'),
            ('一二三四五六七八九〇', '1234567890'),
        ]
        for tp in test_patterns:
            self.assertEqual(kansuji2num(text=tp[0]), tp[1])
        return

    def test_taisu_nonum(self: TestKansuji2num) -> None:
        test_patterns = [
            ('万感の思い', '万感の思い'),
            ('ジョン万次郎', 'ジョン万次郎'),
            ('億万長者', '億万長者'),
            ('数億光年', '数億光年'),
            ('兆候', '兆候'),
            ('予兆', '予兆'),
            ('京都旅行', '京都旅行'),
            ('スパコン京', 'スパコン京'),
        ]
        for tp in test_patterns:
            self.assertEqual(kansuji2num(text=tp[0]), tp[1])
        return

    def test_comma(self: TestKansuji2num) -> None:
        test_patterns = [
            ('１２３，４５６，７８９', '123456789'),
            ('１２３,４５６,７８９', '123456789'),
            ('123,456,789', '123456789'),
            ('テスト，４５６', 'テスト，456'),
            ('テスト,456', 'テスト,456'),
            ('４５６，テスト', '456テスト'),
            ('４５６，', '456'),
        ]
        for tp in test_patterns:
            self.assertEqual(kansuji2num(text=tp[0]), tp[1])
        return

    def test_decimal(self: TestKansuji2num) -> None:
        test_patterns = [
            ('十二．三四', '12.34'),
            ('１２．３４', '12.34'),
            ('十二.三四', '12.34'),
            ('１２.３４', '12.34'),
            ('12.34', '12.34'),
            ('〇．〇〇五六', '0.0056'),
            ('０．００５６', '0.0056'),
            ('〇.〇〇五六', '0.0056'),
            ('０.００５６', '0.0056'),
            ('0.0056', '0.0056'),
            ('十二．〇〇', '12'),
            ('十二．', '12'),
            ('１２．０', '12'),
            ('１２．', '12'),
            ('十二.〇〇', '12'),
            ('十二.', '12'),
            ('１２.０', '12'),
            ('１２.', '12'),
            ('12.00', '12'),
            ('12.', '12'),
            ('．六七八九', '．6789'),
            ('．６７８９', '．6789'),
            ('.六七八九', '.6789'),
            ('.６７８９', '.6789'),
            ('.6789', '.6789'),
            ('十二．〇〇〇，一二', '12.00012'),
            ('１２．０００，１２', '12.00012'),
            ('十二.〇〇〇,一二', '12.00012'),
            ('１２.０００,１２', '12.00012'),
            ('12.000,34', '12.00034'),
        ]
        for tp in test_patterns:
            self.assertEqual(kansuji2num(text=tp[0]), tp[1])
        return

    def test_top_zero(self: TestKansuji2num) -> None:
        test_patterns = [
            ('〇一二三', '123'),
            ('０１２３', '123'),
            ('0123', '123'),
            ('〇〇〇〇', '0'),
            ('００００', '0'),
            ('0000', '0'),
            ('〇〇．〇〇', '0'),
            ('００．００', '0'),
            ('〇〇.〇〇', '0'),
            ('００.００', '0'),
            ('00.00', '0'),
            ('〇京〇兆〇億〇万〇千〇百〇十〇', '0'),
            ('〇京〇兆〇億〇万〇千〇百〇十一', '1'),
        ]
        for tp in test_patterns:
            self.assertEqual(kansuji2num(text=tp[0]), tp[1])
        return

    def test_chop_dai(self: TestKansuji2num) -> None:
        test_patterns = [
            ('交響曲第九番', False, '交響曲第9番'),
            ('交響曲第九番', True, '交響曲9番'),
            ('第４楽章', False, '第4楽章'),
            ('第４楽章', True, '4楽章'),
            ('次第に', False, '次第に'),
            ('次第に', True, '次第に'),
            ('次第に〇になる', False, '次第に0になる'),
            ('次第に〇になる', True, '次第に0になる'),
        ]
        for tp in test_patterns:
            self.assertEqual(
                kansuji2num(text=tp[0], chop_dai=tp[1]), tp[2]
            )


if __name__ == '__main__':
    main()
